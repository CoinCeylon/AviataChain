import React, { useState } from "react";

const BLOCKFROST_API_KEY = "preview9zBw0s97SbFzj154sE8RydQ5M50J9Zkp"; // Replace with your key

const walletKeys = ["lace", "nami", "eternl"] as const;
type WalletKey = typeof walletKeys[number];

interface WalletApi {
  enable: () => Promise<EnabledApi>;
  name?: string;
  icon?: string;
}
interface EnabledApi {
  getUsedAddresses: () => Promise<string[]>;
  getBalance: () => Promise<string>;
  getRewardAddresses: () => Promise<string[]>;
  getNetworkId: () => Promise<number>;
}

const getAvailableWallets = (): { key: WalletKey; name: string; icon?: string }[] => {
  const anyWindow = window as any;
  return walletKeys
    .filter((key) => anyWindow.cardano?.[key])
    .map((key) => ({
      key,
      name: anyWindow.cardano[key].name || key.charAt(0).toUpperCase() + key.slice(1),
      icon: anyWindow.cardano[key].icon,
    }));
};

const getWalletApi = (walletKey: WalletKey): WalletApi | undefined => {
  const anyWindow = window as any;
  return anyWindow.cardano?.[walletKey];
};

const lovelaceToAda = (lovelace: string) => (parseInt(lovelace, 10) / 1_000_000).toLocaleString(undefined, { maximumFractionDigits: 6 });

const MultiWallets: React.FC = () => {
  const [selectedWallet, setSelectedWallet] = useState<WalletKey | null>(null);
  const [connected, setConnected] = useState(false);
  const [addresses, setAddresses] = useState<string[]>([]);
  const [balance, setBalance] = useState<string>("");
  const [rewards, setRewards] = useState<string>("");
  const [transactions, setTransactions] = useState<any[]>([]);
  const [networkId, setNetworkId] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const availableWallets = getAvailableWallets();

  const connect = async (walletKey: WalletKey) => {
    setError(null);
    setSelectedWallet(walletKey);
    const wallet = getWalletApi(walletKey);
    if (!wallet) {
      setError("Wallet not found. Please install the extension.");
      return;
    }
    try {
      const api = await wallet.enable();
      setConnected(true);
      const usedAddresses = await api.getUsedAddresses();
      setAddresses(usedAddresses);

      // Fetch ADA balance (using Blockfrost for simplicity)
      const address = usedAddresses[0];
      const balRes = await fetch(`https://cardano-preview.blockfrost.io/api/v0/addresses/${address}`, {
        headers: { project_id: BLOCKFROST_API_KEY }
      });
      const balData = await balRes.json();
      setBalance(balData.amount.find((a: any) => a.unit === "lovelace")?.quantity || "0");

      // Fetch reward address and rewards
      const rewardAddresses = await api.getRewardAddresses();
      if (rewardAddresses.length > 0) {
        const rewardRes = await fetch(`https://cardano-preview.blockfrost.io/api/v0/accounts/${rewardAddresses[0]}`, {
          headers: { project_id: BLOCKFROST_API_KEY }
        });
        const rewardData = await rewardRes.json();
        setRewards(rewardData.withdrawable_amount || "0");
      }

      // Fetch recent transactions
      const txRes = await fetch(`https://cardano-preview.blockfrost.io/api/v0/addresses/${address}/transactions?order=desc&count=5`, {
        headers: { project_id: BLOCKFROST_API_KEY }
      });
      setTransactions(await txRes.json());

      setNetworkId(await api.getNetworkId());
    } catch (e) {
      setError("User denied access or error occurred.");
    }
  };

  return (
    <div>
      <h2>Connect to Cardano Wallet</h2>
      {!connected ? (
        <div>
          {availableWallets.length === 0 && <div>No supported wallets found.</div>}
          {availableWallets.map((wallet) => (
            <button key={wallet.key} onClick={() => connect(wallet.key)}>
              {wallet.icon && <img src={wallet.icon} alt={wallet.name} style={{ width: 24, marginRight: 8 }} />}
              Connect {wallet.name}
            </button>
          ))}
        </div>
      ) : (
        <div>
          <div>
            <strong>Addresses:</strong>
            <ul>
              {addresses.map((addr) => (
                <li key={addr}>{addr}</li>
              ))}
            </ul>
          </div>
          <div>
            <strong>ADA Balance:</strong> {lovelaceToAda(balance)} ADA
          </div>
          <div>
            <strong>Stake Rewards:</strong> {lovelaceToAda(rewards)} ADA
          </div>
          <div>
            <strong>Recent Transactions:</strong>
            <ul>
              {transactions.map((tx) => (
                <li key={tx.tx_hash}>
                  {tx.tx_hash} (Block: {tx.block_height})
                </li>
              ))}
            </ul>
          </div>
          <div>
            <strong>Network ID:</strong> {networkId}
          </div>
        </div>
      )}
      {error && <div style={{ color: "red" }}>{error}</div>}
    </div>
  );
};

export default MultiWallets;
